entity User {
  username String required minlength(3),
  email String required,
  passwordHash String required,
  role String required,
  registrationDate Instant,
  lastLogin Instant
}


entity Assignment {
  description TextBlob,
  technology String,
  image byte[],
  url String,
  difficultyLevel String,
  timeLimit Integer,
  question String required,
  maxPoints Integer required,
  deadline ZonedDateTime required,
  evaluationType String required
}

entity Category {
  id Long,
  assignmentType String,
  image String
}

entity UserAssignment {
  status AssignmentStatus required,
  assignedAt Instant required,
  deadline Instant
}

enum AssignmentStatus {
  ASSIGNED
  COMPLETED
}

// User Module
entity Submission {
  githubUrl String required,
  screenshots ImageBlob,
  textDescription String,
  feedback TextBlob,
  pointsScored Integer,
  timeTaken Instant
}

// Relationships
relationship ManyToOne {
  UserAssignment{user} to User,
  Submission{forAssignment} to UserAssignment,
  Assignment{type} to Category
}


entity SubmissionResult {
  totalPoints Integer,
  detailedResults TextBlob,
  feedback TextBlob
}

entity AuditLog {
  action String required,
  performedAt Instant required,
  details TextBlob
}


relationship ManyToOne {
  UserAssignment{user} to User,
  UserAssignment{assignment} to Assignment,
  SubmissionResult{submission} to Submission,
  AuditLog{user} to User
}

// Enumerations for specific fields
enum Role {
  ADMIN, USER, VALIDATOR
}

enum Status {
  ASSIGNED, IN_PROGRESS, COMPLETED
}


// Pagination for entities that might have many records
paginate User, Assessment, Submission, UserAssessment,  AuditLog with pagination

// Using DTOs to decouple your domain logic from your JSON entries
dto * with mapstruct

// Applying service layer between controller and repository
service * with serviceClass
